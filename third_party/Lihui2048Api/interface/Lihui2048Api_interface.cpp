/*
 * WARNING: this is an autogenerated file and will be overwritten by
 * the extension interface script.
 */

#include "s3eExt.h"
#include "IwDebug.h"
#include "s3eDevice.h"


#include "Lihui2048Api.h"


// For MIPs (and WP8) platform we do not have asm code for stack switching 
// implemented. So we make LoaderCallStart call manually to set GlobalLock
#if defined __mips || defined S3E_ANDROID_X86 || (defined(WINAPI_FAMILY) && (WINAPI_FAMILY == WINAPI_FAMILY_PHONE_APP))
#define LOADER_CALL
#endif

/**
 * Definitions for functions types passed to/from s3eExt interface
 */
typedef       bool(*isMovable_t)();
typedef       void(*move_t)(int type);
typedef        int(*getCurrentScore_t)();
typedef        int(*getBestScore_t)();
typedef       void(*reset_t)();
typedef       bool(*isWin_t)();
typedef        int(*getValue_t)(int x, int y);
typedef        int(*getAnim_t)(int x, int y);
typedef       void(*cleanRect_t)(int x, int y);
typedef       void(*reArrange_t)();
typedef        int(*getBombs_t)();
typedef        int(*getRearranges_t)();
typedef       void(*addBombs_t)();
typedef       void(*addRearranges_t)();
typedef       void(*useBombs_t)();
typedef       void(*useRearranges_t)();
typedef        int(*getEmptyPoints_t)();
typedef       void(*setFlags_t)(const char* key, int flag);
typedef        int(*getFlags_t)(const char* key);

/**
 * struct that gets filled in by Lihui2048ApiRegister
 */
typedef struct Lihui2048ApiFuncs
{
    isMovable_t m_isMovable;
    move_t m_move;
    getCurrentScore_t m_getCurrentScore;
    getBestScore_t m_getBestScore;
    reset_t m_reset;
    isWin_t m_isWin;
    getValue_t m_getValue;
    getAnim_t m_getAnim;
    cleanRect_t m_cleanRect;
    reArrange_t m_reArrange;
    getBombs_t m_getBombs;
    getRearranges_t m_getRearranges;
    addBombs_t m_addBombs;
    addRearranges_t m_addRearranges;
    useBombs_t m_useBombs;
    useRearranges_t m_useRearranges;
    getEmptyPoints_t m_getEmptyPoints;
    setFlags_t m_setFlags;
    getFlags_t m_getFlags;
} Lihui2048ApiFuncs;

static Lihui2048ApiFuncs g_Ext;
static bool g_GotExt = false;
static bool g_TriedExt = false;
static bool g_TriedNoMsgExt = false;

static bool _extLoad()
{
    if (!g_GotExt && !g_TriedExt)
    {
        s3eResult res = s3eExtGetHash(0xf7244308, &g_Ext, sizeof(g_Ext));
        if (res == S3E_RESULT_SUCCESS)
            g_GotExt = true;
        else
            s3eDebugAssertShow(S3E_MESSAGE_CONTINUE_STOP_IGNORE,                 "error loading extension: Lihui2048Api");
            
        g_TriedExt = true;
        g_TriedNoMsgExt = true;
    }

    return g_GotExt;
}

static bool _extLoadNoMsg()
{
    if (!g_GotExt && !g_TriedNoMsgExt)
    {
        s3eResult res = s3eExtGetHash(0xf7244308, &g_Ext, sizeof(g_Ext));
        if (res == S3E_RESULT_SUCCESS)
            g_GotExt = true;
        g_TriedNoMsgExt = true;
        if (g_TriedExt)
            g_TriedExt = true;
    }

    return g_GotExt;
}

s3eBool Lihui2048ApiAvailable()
{
    _extLoadNoMsg();
    return g_GotExt ? S3E_TRUE : S3E_FALSE;
}

bool isMovable()
{
    IwTrace(LIHUI2048API_VERBOSE, ("calling Lihui2048Api[0] func: isMovable"));

    if (!_extLoad())
        return true;

#ifdef LOADER_CALL
    s3eDeviceLoaderCallStart(S3E_TRUE, NULL);
#endif

    bool ret = g_Ext.m_isMovable();

#ifdef LOADER_CALL
    s3eDeviceLoaderCallDone(S3E_TRUE, NULL);
#endif

    return ret;
}

void move(int type)
{
    IwTrace(LIHUI2048API_VERBOSE, ("calling Lihui2048Api[1] func: move"));

    if (!_extLoad())
        return;

#ifdef LOADER_CALL
    s3eDeviceLoaderCallStart(S3E_TRUE, NULL);
#endif

    g_Ext.m_move(type);

#ifdef LOADER_CALL
    s3eDeviceLoaderCallDone(S3E_TRUE, NULL);
#endif

    return;
}

int getCurrentScore()
{
    IwTrace(LIHUI2048API_VERBOSE, ("calling Lihui2048Api[2] func: getCurrentScore"));

    if (!_extLoad())
        return 0;

#ifdef LOADER_CALL
    s3eDeviceLoaderCallStart(S3E_TRUE, NULL);
#endif

    int ret = g_Ext.m_getCurrentScore();

#ifdef LOADER_CALL
    s3eDeviceLoaderCallDone(S3E_TRUE, NULL);
#endif

    return ret;
}

int getBestScore()
{
    IwTrace(LIHUI2048API_VERBOSE, ("calling Lihui2048Api[3] func: getBestScore"));

    if (!_extLoad())
        return 0;

#ifdef LOADER_CALL
    s3eDeviceLoaderCallStart(S3E_TRUE, NULL);
#endif

    int ret = g_Ext.m_getBestScore();

#ifdef LOADER_CALL
    s3eDeviceLoaderCallDone(S3E_TRUE, NULL);
#endif

    return ret;
}

void reset()
{
    IwTrace(LIHUI2048API_VERBOSE, ("calling Lihui2048Api[4] func: reset"));

    if (!_extLoad())
        return;

#ifdef LOADER_CALL
    s3eDeviceLoaderCallStart(S3E_TRUE, NULL);
#endif

    g_Ext.m_reset();

#ifdef LOADER_CALL
    s3eDeviceLoaderCallDone(S3E_TRUE, NULL);
#endif

    return;
}

bool isWin()
{
    IwTrace(LIHUI2048API_VERBOSE, ("calling Lihui2048Api[5] func: isWin"));

    if (!_extLoad())
        return true;

#ifdef LOADER_CALL
    s3eDeviceLoaderCallStart(S3E_TRUE, NULL);
#endif

    bool ret = g_Ext.m_isWin();

#ifdef LOADER_CALL
    s3eDeviceLoaderCallDone(S3E_TRUE, NULL);
#endif

    return ret;
}

int getValue(int x, int y)
{
    IwTrace(LIHUI2048API_VERBOSE, ("calling Lihui2048Api[6] func: getValue"));

    if (!_extLoad())
        return 0;

#ifdef LOADER_CALL
    s3eDeviceLoaderCallStart(S3E_TRUE, NULL);
#endif

    int ret = g_Ext.m_getValue(x, y);

#ifdef LOADER_CALL
    s3eDeviceLoaderCallDone(S3E_TRUE, NULL);
#endif

    return ret;
}

int getAnim(int x, int y)
{
    IwTrace(LIHUI2048API_VERBOSE, ("calling Lihui2048Api[7] func: getAnim"));

    if (!_extLoad())
        return 0;

#ifdef LOADER_CALL
    s3eDeviceLoaderCallStart(S3E_TRUE, NULL);
#endif

    int ret = g_Ext.m_getAnim(x, y);

#ifdef LOADER_CALL
    s3eDeviceLoaderCallDone(S3E_TRUE, NULL);
#endif

    return ret;
}

void cleanRect(int x, int y)
{
    IwTrace(LIHUI2048API_VERBOSE, ("calling Lihui2048Api[8] func: cleanRect"));

    if (!_extLoad())
        return;

#ifdef LOADER_CALL
    s3eDeviceLoaderCallStart(S3E_TRUE, NULL);
#endif

    g_Ext.m_cleanRect(x, y);

#ifdef LOADER_CALL
    s3eDeviceLoaderCallDone(S3E_TRUE, NULL);
#endif

    return;
}

void reArrange()
{
    IwTrace(LIHUI2048API_VERBOSE, ("calling Lihui2048Api[9] func: reArrange"));

    if (!_extLoad())
        return;

#ifdef LOADER_CALL
    s3eDeviceLoaderCallStart(S3E_TRUE, NULL);
#endif

    g_Ext.m_reArrange();

#ifdef LOADER_CALL
    s3eDeviceLoaderCallDone(S3E_TRUE, NULL);
#endif

    return;
}

int getBombs()
{
    IwTrace(LIHUI2048API_VERBOSE, ("calling Lihui2048Api[10] func: getBombs"));

    if (!_extLoad())
        return 0;

#ifdef LOADER_CALL
    s3eDeviceLoaderCallStart(S3E_TRUE, NULL);
#endif

    int ret = g_Ext.m_getBombs();

#ifdef LOADER_CALL
    s3eDeviceLoaderCallDone(S3E_TRUE, NULL);
#endif

    return ret;
}

int getRearranges()
{
    IwTrace(LIHUI2048API_VERBOSE, ("calling Lihui2048Api[11] func: getRearranges"));

    if (!_extLoad())
        return 0;

#ifdef LOADER_CALL
    s3eDeviceLoaderCallStart(S3E_TRUE, NULL);
#endif

    int ret = g_Ext.m_getRearranges();

#ifdef LOADER_CALL
    s3eDeviceLoaderCallDone(S3E_TRUE, NULL);
#endif

    return ret;
}

void addBombs()
{
    IwTrace(LIHUI2048API_VERBOSE, ("calling Lihui2048Api[12] func: addBombs"));

    if (!_extLoad())
        return;

#ifdef LOADER_CALL
    s3eDeviceLoaderCallStart(S3E_TRUE, NULL);
#endif

    g_Ext.m_addBombs();

#ifdef LOADER_CALL
    s3eDeviceLoaderCallDone(S3E_TRUE, NULL);
#endif

    return;
}

void addRearranges()
{
    IwTrace(LIHUI2048API_VERBOSE, ("calling Lihui2048Api[13] func: addRearranges"));

    if (!_extLoad())
        return;

#ifdef LOADER_CALL
    s3eDeviceLoaderCallStart(S3E_TRUE, NULL);
#endif

    g_Ext.m_addRearranges();

#ifdef LOADER_CALL
    s3eDeviceLoaderCallDone(S3E_TRUE, NULL);
#endif

    return;
}

void useBombs()
{
    IwTrace(LIHUI2048API_VERBOSE, ("calling Lihui2048Api[14] func: useBombs"));

    if (!_extLoad())
        return;

#ifdef LOADER_CALL
    s3eDeviceLoaderCallStart(S3E_TRUE, NULL);
#endif

    g_Ext.m_useBombs();

#ifdef LOADER_CALL
    s3eDeviceLoaderCallDone(S3E_TRUE, NULL);
#endif

    return;
}

void useRearranges()
{
    IwTrace(LIHUI2048API_VERBOSE, ("calling Lihui2048Api[15] func: useRearranges"));

    if (!_extLoad())
        return;

#ifdef LOADER_CALL
    s3eDeviceLoaderCallStart(S3E_TRUE, NULL);
#endif

    g_Ext.m_useRearranges();

#ifdef LOADER_CALL
    s3eDeviceLoaderCallDone(S3E_TRUE, NULL);
#endif

    return;
}

int getEmptyPoints()
{
    IwTrace(LIHUI2048API_VERBOSE, ("calling Lihui2048Api[16] func: getEmptyPoints"));

    if (!_extLoad())
        return 0;

#ifdef LOADER_CALL
    s3eDeviceLoaderCallStart(S3E_TRUE, NULL);
#endif

    int ret = g_Ext.m_getEmptyPoints();

#ifdef LOADER_CALL
    s3eDeviceLoaderCallDone(S3E_TRUE, NULL);
#endif

    return ret;
}

void setFlags(const char* key, int flag)
{
    IwTrace(LIHUI2048API_VERBOSE, ("calling Lihui2048Api[17] func: setFlags"));

    if (!_extLoad())
        return;

#ifdef LOADER_CALL
    s3eDeviceLoaderCallStart(S3E_TRUE, NULL);
#endif

    g_Ext.m_setFlags(key, flag);

#ifdef LOADER_CALL
    s3eDeviceLoaderCallDone(S3E_TRUE, NULL);
#endif

    return;
}

int getFlags(const char* key)
{
    IwTrace(LIHUI2048API_VERBOSE, ("calling Lihui2048Api[18] func: getFlags"));

    if (!_extLoad())
        return 0;

#ifdef LOADER_CALL
    s3eDeviceLoaderCallStart(S3E_TRUE, NULL);
#endif

    int ret = g_Ext.m_getFlags(key);

#ifdef LOADER_CALL
    s3eDeviceLoaderCallDone(S3E_TRUE, NULL);
#endif

    return ret;
}
