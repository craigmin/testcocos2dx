/*
 * WARNING: this is an autogenerated file and will be overwritten by
 * the extension interface script.
 */
/*
 * This file contains the automatically generated loader-side
 * functions that form part of the extension.
 *
 * This file is awlays compiled into all loaders but compiles
 * to nothing if this extension is not enabled in the loader
 * at build time.
 */
#include "IwDebug.h"
#include "LihuiLB_autodefs.h"
#include "s3eEdk.h"
#include "LihuiLB.h"
//Declarations of Init and Term functions
extern s3eResult LihuiLBInit();
extern void LihuiLBTerminate();


// On platforms that use a seperate UI/OS thread we can autowrap functions
// here.   Note that we can't use the S3E_USE_OS_THREAD define since this
// code is oftern build standalone, outside the main loader build.
#if defined I3D_OS_IPHONE || defined I3D_OS_OSX || defined I3D_OS_LINUX || defined I3D_OS_WINDOWS

static void initLB_wrap()
{
    IwTrace(LIHUILB_VERBOSE, ("calling LihuiLB func on main thread: initLB"));
    s3eEdkThreadRunOnOS((s3eEdkThreadFunc)initLB, 0);
}

static void updateScore_wrap(int score)
{
    IwTrace(LIHUILB_VERBOSE, ("calling LihuiLB func on main thread: updateScore"));
    s3eEdkThreadRunOnOS((s3eEdkThreadFunc)updateScore, 1, score);
}

static void receiveRank_wrap()
{
    IwTrace(LIHUILB_VERBOSE, ("calling LihuiLB func on main thread: receiveRank"));
    s3eEdkThreadRunOnOS((s3eEdkThreadFunc)receiveRank, 0);
}

static int getScore_wrap(int rank)
{
    IwTrace(LIHUILB_VERBOSE, ("calling LihuiLB func on main thread: getScore"));
    return (int)(intptr_t)s3eEdkThreadRunOnOS((s3eEdkThreadFunc)getScore, 1, rank);
}

static int getUserRank_wrap()
{
    IwTrace(LIHUILB_VERBOSE, ("calling LihuiLB func on main thread: getUserRank"));
    return (int)(intptr_t)s3eEdkThreadRunOnOS((s3eEdkThreadFunc)getUserRank, 0);
}

static int getNextWeekLeftSeconds_wrap()
{
    IwTrace(LIHUILB_VERBOSE, ("calling LihuiLB func on main thread: getNextWeekLeftSeconds"));
    return (int)(intptr_t)s3eEdkThreadRunOnOS((s3eEdkThreadFunc)getNextWeekLeftSeconds, 0);
}

static bool notUnlimetedLives_wrap()
{
    IwTrace(LIHUILB_VERBOSE, ("calling LihuiLB func on main thread: notUnlimetedLives"));
    return (bool)(intptr_t)s3eEdkThreadRunOnOS((s3eEdkThreadFunc)notUnlimetedLives, 0);
}

static void setBeijingTime_wrap()
{
    IwTrace(LIHUILB_VERBOSE, ("calling LihuiLB func on main thread: setBeijingTime"));
    s3eEdkThreadRunOnOS((s3eEdkThreadFunc)setBeijingTime, 0);
}

static bool notShared_wrap()
{
    IwTrace(LIHUILB_VERBOSE, ("calling LihuiLB func on main thread: notShared"));
    return (bool)(intptr_t)s3eEdkThreadRunOnOS((s3eEdkThreadFunc)notShared, 0);
}

static void setShareTime_wrap()
{
    IwTrace(LIHUILB_VERBOSE, ("calling LihuiLB func on main thread: setShareTime"));
    s3eEdkThreadRunOnOS((s3eEdkThreadFunc)setShareTime, 0);
}

#define initLB initLB_wrap
#define updateScore updateScore_wrap
#define receiveRank receiveRank_wrap
#define getScore getScore_wrap
#define getUserRank getUserRank_wrap
#define getNextWeekLeftSeconds getNextWeekLeftSeconds_wrap
#define notUnlimetedLives notUnlimetedLives_wrap
#define setBeijingTime setBeijingTime_wrap
#define notShared notShared_wrap
#define setShareTime setShareTime_wrap

#endif

s3eResult LihuiLBRegister(LihuiLBCallback cbid, s3eCallback fn, void* pData)
{
    return s3eEdkCallbacksRegister(S3E_EXT_LIHUILB_HASH, LIHUILB_CALLBACK_MAX, cbid, fn, pData, 0);
};

s3eResult LihuiLBUnRegister(LihuiLBCallback cbid, s3eCallback fn)
{
    return s3eEdkCallbacksUnRegister(S3E_EXT_LIHUILB_HASH, LIHUILB_CALLBACK_MAX, cbid, fn);
}

void LihuiLBRegisterExt()
{
    /* fill in the function pointer struct for this extension */
    void* funcPtrs[12];
    funcPtrs[0] = (void*)LihuiLBRegister;
    funcPtrs[1] = (void*)LihuiLBUnRegister;
    funcPtrs[2] = (void*)initLB;
    funcPtrs[3] = (void*)updateScore;
    funcPtrs[4] = (void*)receiveRank;
    funcPtrs[5] = (void*)getScore;
    funcPtrs[6] = (void*)getUserRank;
    funcPtrs[7] = (void*)getNextWeekLeftSeconds;
    funcPtrs[8] = (void*)notUnlimetedLives;
    funcPtrs[9] = (void*)setBeijingTime;
    funcPtrs[10] = (void*)notShared;
    funcPtrs[11] = (void*)setShareTime;

    /*
     * Flags that specify the extension's use of locking and stackswitching
     */
    int flags[12] = { 0 };

    /*
     * Register the extension
     */
    s3eEdkRegister("LihuiLB", funcPtrs, sizeof(funcPtrs), flags, LihuiLBInit, LihuiLBTerminate, 0);
}

#if !defined S3E_BUILD_S3ELOADER

#if defined S3E_EDK_USE_STATIC_INIT_ARRAY
int LihuiLBStaticInit()
{
    void** p = g_StaticInitArray;
    void* end = p + g_StaticArrayLen;
    while (*p) p++;
    if (p < end)
        *p = (void*)&LihuiLBRegisterExt;
    return 0;
}

int g_LihuiLBVal = LihuiLBStaticInit();

#elif defined S3E_EDK_USE_DLLS
S3E_EXTERN_C S3E_DLL_EXPORT void RegisterExt()
{
    LihuiLBRegisterExt();
}
#endif

#endif
